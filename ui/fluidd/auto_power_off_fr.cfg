# Intégration Fluidd pour extinction automatique
# Incluez ce fichier dans votre printer.cfg avec: [include fluidd/auto_power_off_fr.cfg]

[virtual_sdcard]
path: ~/printer_data/gcodes

# Cette section est requise pour que Klipper reconnaisse le fichier comme valide
[respond]

# Définition du panneau personnalisé
# ---------------------------------

{% set auto_power_off = printer['auto_power_off'] %}

<v-card>
  <v-card-title class="blue-grey darken-1 white--text">
    <v-icon class="white--text">mdi-power-plug-off</v-icon>
    Extinction Automatique
  </v-card-title>
  <v-card-text class="py-3">
    <v-layout align-center>
      <v-flex>
        <p class="mb-0">État global:</p>
      </v-flex>
      <v-flex class="text-right">
        <v-switch
          v-model="auto_power_off_enabled"
          hide-details
          dense
          class="mt-0"
          @change="setPoweroffState"
        />
      </v-flex>
    </v-layout>

    <v-divider class="my-3"></v-divider>

    <p v-if="auto_power_off.active" class="mb-2 mt-0">
      <v-icon small color="orange">mdi-timer-outline</v-icon>
      L'imprimante s'éteindra automatiquement dans <strong>{{ formatTime(auto_power_off.countdown) }}</strong>
    </p>
    <p v-else class="mb-2 mt-0">
      <v-icon small color="gray">mdi-timer-off-outline</v-icon>
      Aucun minuteur d'extinction actif
    </p>

    <p class="mb-2">
      <v-icon small color="red">mdi-thermometer</v-icon>
      Température de la buse: <strong>{{ auto_power_off.current_temps.hotend.toFixed(1) }}°C</strong> 
      | Lit: <strong>{{ auto_power_off.current_temps.bed.toFixed(1) }}°C</strong>
    </p>

    <p class="mb-2">
      <v-icon small color="blue">mdi-alert-circle-outline</v-icon>
      L'extinction se déclenchera quand les températures seront en dessous de <strong>{{ auto_power_off.temp_threshold }}°C</strong>
    </p>

    <v-alert
      v-if="auto_power_off.current_temps.hotend > auto_power_off.temp_threshold || auto_power_off.current_temps.bed > auto_power_off.temp_threshold"
      dense
      text
      type="warning"
      class="mt-2 mb-2"
    >
      Les températures sont encore trop élevées pour l'extinction
    </v-alert>

    <v-layout class="mt-3">
      <v-btn
        small
        color="primary"
        text
        :disabled="!auto_power_off.enabled || auto_power_off.active"
        @click="sendGcode('AUTO_POWEROFF START')"
      >
        <v-icon small class="mr-1">mdi-timer-outline</v-icon>
        Démarrer
      </v-btn>
      <v-btn
        small
        color="error"
        text
        :disabled="!auto_power_off.active"
        @click="sendGcode('AUTO_POWEROFF CANCEL')"
      >
        <v-icon small class="mr-1">mdi-timer-off-outline</v-icon>
        Annuler
      </v-btn>
      <v-spacer></v-spacer>
      <v-btn
        small
        color="error"
        @click="confirmShutdown"
      >
        <v-icon small class="mr-1">mdi-power</v-icon>
        Éteindre maintenant
      </v-btn>
    </v-layout>
  </v-card-text>
</v-card>

<script>
  export default {
    data() {
      return {
        auto_power_off_enabled: this.printer.auto_power_off?.enabled || false
      }
    },
    methods: {
      setPoweroffState() {
        const cmd = this.auto_power_off_enabled ? 'AUTO_POWEROFF ON' : 'AUTO_POWEROFF OFF'
        this.$store.dispatch('server/addEvent', { message: `Extinction automatique ${this.auto_power_off_enabled ? 'activée' : 'désactivée'}`, type: 'complete' })
        this.$socket.emit('printer.gcode.script', { script: cmd })
      },
      confirmShutdown() {
        this.$store.dispatch('power/createConfirmDialog', { 
          title: "Éteindre l'imprimante",
          text: "Êtes-vous sûr de vouloir éteindre l'imprimante maintenant ?",
          onConfirm: () => this.sendGcode('AUTO_POWEROFF NOW')
        })
      },
      sendGcode(gcode) {
        this.$socket.emit('printer.gcode.script', { script: gcode })
      },
      formatTime(seconds) {
        const minutes = Math.floor(seconds / 60)
        seconds = seconds % 60
        return `${minutes}m ${seconds}s`
      }
    },
    watch: {
      'printer.auto_power_off.enabled': {
        deep: true,
        handler(val) {
          this.auto_power_off_enabled = val
        }
      }
    }
  }
</script>